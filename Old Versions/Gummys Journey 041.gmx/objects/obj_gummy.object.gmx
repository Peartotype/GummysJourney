<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 8;
hp = 5;
energy = 10;
maxhp = 5;
maxenergy = 10;
money = 0;
enabled = true;
basespeed = 5; //5
movespeed = basespeed;
ymovespeed = 3; //3

energyrefilldelay = 15;
energyrefillamount = 1;
energyrefillactive = false;

candash = true;
dashdelay = 3;
checkdir = true;
dir = -1;

btype = obj_bullet;
bulletSpeed = 12;
bulletDamage = 1;
canfire = true;
firedelay = 20;

canspecial = true;
specialactive = false;
special = global.special
specialdelay = scr_get_special_delay(special);
specialcd = scr_get_special_cooldown(special);

canspecial2 = true;
special2active = false;
special2 = global.special2
special2delay = scr_get_special_delay(special2);
special2cd = scr_get_special_cooldown(special2);


cdie = true;

rightshotx = 22
rightshoty = -18
leftshotx = -25
leftshoty = -18
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>energyrefillactive = false;
if (energy+energyrefillamount) &gt; maxenergy
{
    energy = maxenergy;
}
else
{
    energy += energyrefillamount;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canspecial2 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>special2active = false;
scr_remove_special(special2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canspecial = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>candash = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movespeed = basespeed;
checkdir = true;
dir = -1;
image_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialactive = false;
scr_remove_special(special);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canfire = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if enabled
{
    //Input
    if director.mousecontrol key_fire = keyboard_check(vk_space) or mouse_check_button(mb_left);
    else key_fire = keyboard_check(vk_space);
    
    if director.mousecontrol key_special = keyboard_check_released(ord('Q')) or mouse_check_button_released(mb_right);
    else key_special = keyboard_check_released(ord('Q'));
    
    if director.mousecontrol key_special2 = keyboard_check_released(ord('E')) or mouse_check_button_released(mb_middle);
    else key_special2 = keyboard_check_released(ord('E'));
    
    key_left = keyboard_check(ord('A')) or keyboard_check(vk_left);
    key_right = keyboard_check(ord('D')) or keyboard_check(vk_right);
    key_up = keyboard_check(ord('W')) or keyboard_check(vk_up);
    key_down = keyboard_check(ord('S')) or keyboard_check(vk_down);
    
    key_dash = keyboard_check(vk_shift);
    
    //Movement
    if cdie
    {
        if checkdir
        {
            if key_left x -= movespeed;
            if key_right x += movespeed;
        }
        
        if not obj_game.intro
        {
            if key_up y -= ymovespeed;
            if key_down y += ymovespeed;
        }
        
        if key_dash and candash
        {
            if checkdir
            {
                if key_left and !key_right
                {
                    candash = false;
                    checkdir = false
                    dir = 1;
                    audio_play_sound(snd_dash, 0, 0);
                    image_angle = 20;
                    alarm[2] = 15;
                    alarm[3] = dashdelay * 60;
                }
                else if key_right and !key_left
                {
                    candash = false;
                    checkdir =false;
                    dir = 0;
                    audio_play_sound(snd_dash, 0, 0);
                    image_angle = 340;
                    alarm[2] = 15;
                    alarm[3] = dashdelay * 60;
                }
            }
        }
        
        if dir == 0
        {
            x += 10;
        }
        else if dir == 1
        {
            x -= 10;
        }
        
        x = median(24, x, room_width-24); //Keep player within room
        if not obj_game.intro y = median(24, y, room_height-120); //120 away from room height due to HUD at bottom
    }
    else
    {
        x = -100;
    }
    
    //Shooting
    if global.piercer btype = obj_pbullet;
    else btype = obj_bullet;
    if global.rapidfire firedelay = 10;
    else firedelay = 20;
    if key_fire &amp;&amp; canfire &amp;&amp; cdie
    {
        if global.twoshot
        {
            //scr_fire(-bulletSpeed, bulletDamage, obj_gummy.x+(20), obj_gummy.y+(-20), btype);
            //scr_fire(-bulletSpeed, bulletDamage, obj_gummy.x+(-25), obj_gummy.y+(-20), btype);

            //scr_fire(-bulletSpeed, bulletDamage, x+(22), y+(-18), btype);
            //scr_fire(-bulletSpeed, bulletDamage, x+(-25), y+(-18), btype);
            
            scr_fire(-bulletSpeed, bulletDamage, x+(rightshotx), y+(rightshoty), btype);
            scr_fire(-bulletSpeed, bulletDamage, x+(leftshotx), y+(leftshoty), btype);
            obj_game.bulletsfired += 2;
        }
        else
        {
            scr_fire(-bulletSpeed, bulletDamage, x, y-21, btype);
            obj_game.bulletsfired += 1;
        }
        

        canfire = false;
        alarm[0] = firedelay;
    }

    //Special ability
    if key_special &amp;&amp; canspecial &amp;&amp; cdie
    {
        var cost = scr_get_special_cost(special)
        if energy &gt;= cost
        {
            energy -= cost;
            obj_game.energyused += cost;
            specialactive = true;
            scr_use_special(special);
            audio_play_sound(snd_special, 0, 0);
            
            canspecial = false;
            alarm[1] = specialdelay;
            alarm[4] = specialcd;
        }
        else
        {
            audio_play_sound(snd_deny, 0, 0);
        }
    }
    
    //Secondary Special
    if key_special2 &amp;&amp; canspecial2 &amp;&amp; cdie
    {
        var cost2 = scr_get_special_cost(special2)
        if energy &gt;= cost2
        {
            energy -= cost2;
            obj_game.energyused += cost2;
            special2active = true;
            scr_use_special(special2);
            audio_play_sound(snd_special, 0, 0);
            
            canspecial2 = false;
            alarm[5] = special2delay;
            alarm[6] = special2cd;
        }
        else
        {
            audio_play_sound(snd_deny, 0, 0);
        }
    }
    
    //Energy Refill
    if energyrefillactive == false
    {
        if energy &lt; maxenergy
        {
            energyrefillactive = true;
            alarm[7] = energyrefilldelay*room_speed;
        }
    }
    
    //Health
    if hp &lt;= 0 &amp;&amp; cdie
    {
        instance_create(x, y, obj_pexplosion);
        cdie = false;
    }
    
    if hp &gt;= 1
    {
        cdie = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_redbullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.energyshield == false
{
    hp -= other.damage;
    obj_game.damagetaken += other.damage;
    audio_play_sound(snd_playerhit, 0, 0);
    instance_create(0, 0, env_hit);
    instance_create(0, 0, env_shake);
    
    with instance_create(other.x, other.y, obj_effect)
    {
        image_xscale = 0.4;
        image_yscale = 0.4;
    }
    
    with other
    {
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ai_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp--;
audio_play_sound(snd_playerhit, 0, 0);
instance_create(0, 0, env_hit);
instance_create(0, 0, env_shake);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if cdie draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
